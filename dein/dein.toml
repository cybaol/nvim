[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_cmd = 'AsyncRun'
hook_add = 'source ~/.config/nvim/modules/asyncrun-configs.vim'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'turbio/bracey.vim'
on_ft = 'html'
build = 'npm install --prefix server'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = false
rev = 'release'
hook_add = 'source ~/.config/nvim/modules/coc-configs.vim'

[[plugins]]
repo = 'glepnir/dashboard-nvim'
depends = 'fzf.vim'
hook_add = '''
  let g:dashboard_default_executive = 'fzf'
  nmap <Leader>sl :<C-u>SessionLoad<CR>
  nnoremap <silent> <Leader>fh :DashboardFindHistory<CR>
  nnoremap <silent> <Leader>ff :DashboardFindFile<CR>
  nnoremap <silent> <Leader>nf :DashboardNewFile<CR>
  nnoremap <silent> <Leader>cs :DashboardChangeColorscheme<CR>
  nnoremap <silent> <Leader>fw :DashboardFindWord<CR>
  nnoremap <silent> <Leader>fb :DashboardJumpMark<CR>
  let g:dashboard_custom_shortcut = {
              \ 'last_session' : 'SPC s l',
              \ 'find_history' : 'SPC f h',
              \ 'find_file' : 'SPC f f',
              \ 'new_file' : 'SPC n f',
              \ 'change_colorscheme' : 'SPC c s',
              \ 'find_word' : 'SPC f w',
              \ 'book_marks' : 'SPC f b',
              \ }
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'brooth/far.vim'
on_cmd = ['F', 'Far', 'Fardo']
hook_add = '''
  nnoremap <C-f> :F  %<left><left>
'''

[[plugins]]
repo = 'mhartington/formatter.nvim'
hook_add = '''
  nnoremap <silent> fm :w<CR>:Format<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'glepnir/galaxyline.nvim'
merged = false

[[plugins]]
repo = 'phaazon/hop.nvim'
on_map = 'HopChar2'
hook_add = '''
  nnoremap mv :HopChar2<CR>
'''

[[plugins]]
repo = 'glepnir/indent-guides.nvim'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app & yarn install"'

[[plugins]]
repo = 'akinsho/nvim-bufferline.lua'
depends = 'nvim-web-devicons'

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'

[[plugins]]
repo = 'theniceboy/nvim-deus'
hook_add = '''
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
  colorscheme deus
  " space-indent
  hi Conceal gui=NONE guifg=#FF69B4 guibg=NONE
  " tab-indent
  hi NonText ctermfg=gray guifg=grey10
'''

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = ':TSUpdate'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

[[plugins]]
repo = 'kevinhwang91/rnvimr'
on_cmd = 'RnvimrToggle'
hook_add = '''
  let g:rnvimr_enable_ex   = 1
  let g:rnvimr_pick_enable = 1
  highlight link RnvimrNormal CursorLine
  nnoremap <silent> ra :RnvimrToggle<CR>
  let g:rnvimr_layout  = { 'relative': 'editor',
              \ 'width': &columns,
              \ 'height': &lines,
              \ 'col': 0,
              \ 'row': 0,
              \ 'style': 'minimal' }
  let g:rnvimr_presets = [{'width': 1.0, 'height': 1.0}]
'''

[[plugins]]
repo = 'numirias/semshi'
on_ft = 'python'
hook_post_update = ':UpdateRemotePlugins'
hook_add = '''
  nmap <silent> rr :Semshi rename<CR>
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_cmd = 'Tabularize'
hook_add = '''
  vmap <leader><tab> :Tabularize /
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'KeitaNakamura/tex-conceal.vim'

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
  silent !mkdir -p ~/.config/nvim/tmp/backup
  silent !mkdir -p ~/.config/nvim/tmp/undo
  set backupdir=~/.config/nvim/tmp/backup,.
  set directory=~/.config/nvim/tmp/backup,.
  if has('persistent_undo')
    set undofile
    set undodir=~/.config/nvim/tmp/undo,.
  endif
  nnoremap ud :UndotreeToggle<CR>
  let g:undotree_DiffAutoOpen       = 1
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators    = 1
  let g:undotree_WindowLayout       = 2
  let g:undotree_DiffpanelHeight    = 8
  let g:undotree_SplitWidth         = 24
  function g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeNextState
    nmap <buffer> j <plug>UndotreePreviousState
  endfunction
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_map_keys             = 0
  let g:gitgutter_sign_allow_clobber   = 0
  let g:gitgutter_preview_win_floating = 1
  nnoremap <leader>gf :GitGutterFold<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_post_update = ':GoInstallBinaries'

[[plugins]]
repo = 'yuezk/vim-js'

[[plugins]]
repo = 'honza/vim-snippets'
merged = false
depends = 'coc.nvim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_cmd = 'TableModeToggle'
hook_add = '''
  noremap <leader>tm :TableModeToggle<CR>
'''

[[plugins]]
repo = 'voldikss/vim-translator'
on_map = ['<Plug>TranslateW', '<Plug>TranslateWV']
hook_add = '''
  nmap <silent> ts <Plug>TranslateW
  vmap <silent> ts <Plug>TranslateWV
  let g:translator_default_engines = ['google']
'''

[[plugins]]
repo = 'puremourning/vimspector'
on_ft = [ 'c', 'cpp', 'python', 'go' ]
hook_post_update = ':VimspectorUpdate vscode-cpptools debugpy vscode-go'
hook_add = '''
  let g:vimspector_enable_mappings   = 'HUMAN'
  function! s:read_template_into_buffer(template)
      execute '0r ~/.config/nvim/vimspector-json/'.a:template
  endfunction
  command! -bang -nargs=* LoadVimSpectorJsonTemplate call fzf#run({
              \   'source': 'ls -1 ~/.config/nvim/vimspector-json',
              \   'down': 10,
              \   'sink': function('<sid>read_template_into_buffer')
              \ })
  nnoremap <leader>vs :tabe .vimspector.json<CR>:LoadVimSpectorJsonTemplate<CR>
  nnoremap <F7> :call vimspector#Reset()<CR>
  nmap <Leader>di <Plug>VimspectorBalloonEval
  xmap <Leader>di <Plug>VimspectorBalloonEval
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_add = '''
  set iskeyword+=:
  let g:tex_flavor                      = 'latex'
  let g:vimtex_view_method              = 'zathura'
  let g:vimtex_quickfix_mode            = 0
  set conceallevel=2
  let g:tex_conceal                     = 'abdmg'
  let g:vimtex_compiler_latexmk_engines = { '_': '-xelatex' }
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = 'Vista'
hook_add = '''
  nnoremap tb :Vista<CR>
  let g:vista_icon_indent          = ["╰─▸ ", "├─▸ "]
  let g:vista_default_executive    = 'ctags'
  let g:vista_fzf_preview          = ['right:50%']
  let g:vista#renderer#enable_icon = 1
'''

[[plugins]]
repo = 'gcmt/wildfire.vim'
